generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  clerkId   String     @unique
  email     String     @unique
  name      String?
  role      UserRole   @default(CUSTOMER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admins    admins?
  customers customers?
  employees employees?
  invoices  invoices[]

  @@map("users")
}

model ActivityTemplate {
  id                String            @id @default(cuid())
  name              String
  description       String
  category          ActivityCategory
  estimatedHours    Decimal           @db.Decimal(5, 2)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  packageActivities PackageActivity[]

  @@map("activity_templates")
}

model Package {
  id                String              @id @default(cuid())
  name              String
  description       String?
  maxHours          Int
  price             Decimal             @db.Decimal(10, 2)
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  customer_packages customer_packages[]
  packageActivities PackageActivity[]

  @@map("packages")
}

model PackageActivity {
  id                 String           @id @default(cuid())
  packageId          String
  activityTemplateId String
  quantity           Int              @default(1)
  isIncluded         Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  activityTemplate   ActivityTemplate @relation(fields: [activityTemplateId], references: [id])
  package            Package          @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, activityTemplateId])
  @@map("package_activities")
}

model Activity {
  id                String            @id @default(cuid())
  customerPackageId String
  employeeId        String
  description       String
  hours             Decimal           @db.Decimal(5, 2)
  date              DateTime
  status            ActivityStatus    @default(PENDING)
  rompslompTaskId   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  customer_packages customer_packages @relation(fields: [customerPackageId], references: [id], onDelete: Cascade)
  employees         employees         @relation(fields: [employeeId], references: [id])

  @@map("activities")
}

model admins {
  id          String   @id
  userId      String   @unique
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  users       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model customer_packages {
  id                   String        @id
  customerId           String
  packageId            String
  startDate            DateTime
  endDate              DateTime?
  status               PackageStatus @default(ACTIVE)
  stripeSubscriptionId String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime
  activities           Activity[]
  customers            customers     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  packages             Package       @relation(fields: [packageId], references: [id])
}

model customers {
  id                String              @id
  userId            String              @unique
  company           String?
  phone             String?
  address           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  customer_packages customer_packages[]
  users             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices          invoices[]
}

model employees {
  id         String     @id
  userId     String     @unique
  hourlyRate Decimal    @db.Decimal(10, 2)
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime
  activities Activity[]
  users      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model invoices {
  id              String        @id
  customerId      String
  userId          String
  amount          Decimal       @db.Decimal(10, 2)
  status          InvoiceStatus @default(PENDING)
  stripeInvoiceId String?
  dueDate         DateTime
  paidAt          DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  customers       customers     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  users           User          @relation(fields: [userId], references: [id])
}

enum ActivityStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum ActivityCategory {
  WEBSITE
  SOCIAL_MEDIA
  EMAIL_MARKETING
  DESIGN
  CONTENT
  SEO
  ANALYTICS
  CONSULTING
  TECHNICAL
  ADMINISTRATION
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PackageStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
}

enum UserRole {
  CUSTOMER
  EMPLOYEE
  ADMIN
}
